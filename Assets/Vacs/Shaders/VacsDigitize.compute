#pragma kernel Main

#include "Common.hlsl"
#include "SimplexNoise3D.hlsl"

StructuredBuffer<float4> PositionSource;
StructuredBuffer<float4> PositionInput;
RWBuffer<float4> PositionOutput;

CBUFFER_START(Params)
    uint TriangleCount;
    float RandomSeed;
    float Time;
    float Amplitude;
CBUFFER_END

[numthreads(256, 1, 1)]
void Main(uint id : SV_DispatchThreadID)
{
    if (id * 2 >= TriangleCount) return;

    // Generate random numbers in advance.
    const uint seed = (uint)(RandomSeed * 0xffffff);
    const float rand1 = Random(seed + id);
    const float rand2 = Random(seed + id + 100000);

    // The vertex indices of the first triangle
    const uint i1 = id * 2;
    const uint i2 = id * 2 + TriangleCount;
    const uint i3 = id * 2 + TriangleCount * 2;

    // The vertex indices of the second triangle
    const uint i4 = i1 + 1;
    const uint i5 = i2 + 1;
    const uint i6 = i3 + 1;

    // The vertex positions from the original source
    const float3 P1 = PositionSource[i1].xyz;
    const float3 P2 = PositionSource[i2].xyz;
    const float3 P3 = PositionSource[i3].xyz;
    const float3 P4 = PositionSource[i4].xyz;
    const float3 P5 = PositionSource[i5].xyz;
    const float3 P6 = PositionSource[i6].xyz;

    // Centroids
    const float3 C123 = (P1 + P2 + P3) / 3;
    const float3 C456 = (P4 + P5 + P6) / 3;
    const float3 Call = (C123 + C456) / 2;

    // Determine the parameter based on the noise field.
    const float3 Pn = Call * float3(1.2, 0.6, 1.2);
    const float3 On = float3(RandomSeed * 100, Time / 2, Time / 4);
    const float ns = saturate(snoise(Pn + On).w * Amplitude * 2);
    const float param = floor(ns * 4 + 0.5) / 4;

    // Position on the unit circle and its tangent
    const float radius = rand1 * 0.01 + 0.4;
    const float2 Vcir = normalize(Call.xz);
    const float3 Pcir = float3(Vcir.x * radius, Call.y, Vcir.y * radius);
    const float3 Vtan = float3(Vcir.y, 0, -Vcir.x);

    // The size of the quad
    const float size = sin(rand2 * PI * 2 + Time * 3) * 0.03 + 0.03;

    // Edge vectors
    const float3 Eh = Vtan * size;
    const float3 Ev = float3(0, size, 0);

    // Modified vertex positions
    const float3 Pm1 = Pcir;
    const float3 Pm2 = Pcir + Ev;
    const float3 Pm3 = Pcir + Eh;
    const float3 Pm4 = Pcir + Eh + Ev;

    // Output
    PositionOutput[i1] = float4(lerp(PositionInput[i1].xyz, Pm1, param), 0);
    PositionOutput[i2] = float4(lerp(PositionInput[i2].xyz, Pm2, param), 0);
    PositionOutput[i3] = float4(lerp(PositionInput[i3].xyz, Pm3, param), 0);
    PositionOutput[i4] = float4(lerp(PositionInput[i4].xyz, Pm2, param), 0);
    PositionOutput[i5] = float4(lerp(PositionInput[i5].xyz, Pm4, param), 0);
    PositionOutput[i6] = float4(lerp(PositionInput[i6].xyz, Pm3, param), 0);
}
