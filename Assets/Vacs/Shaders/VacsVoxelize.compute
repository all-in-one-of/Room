#pragma kernel Main

#include "Common.hlsl"

StructuredBuffer<float4> PositionInput;
RWBuffer<float4> PositionOutput;

CBUFFER_START(Params)
    uint TriangleCount;
    float Amplitude;
CBUFFER_END

[numthreads(256, 1, 1)]
void Main(uint id : SV_DispatchThreadID)
{
    if (id >= TriangleCount) return;

    const uint i1 = id;
    const uint i2 = id + TriangleCount;
    const uint i3 = id + TriangleCount * 2;

    const float3 P1 = PositionInput[i1].xyz;
    const float3 P2 = PositionInput[i2].xyz;
    const float3 P3 = PositionInput[i3].xyz;

    const float voxel_size = 0.1;
    const float3 D1 = (frac(P1 / voxel_size) - 0.5) * voxel_size;
    const float3 D2 = (frac(P2 / voxel_size) - 0.5) * voxel_size;
    const float3 D3 = (frac(P3 / voxel_size) - 0.5) * voxel_size;

    PositionOutput[i1] = float4(P1 - D1 * Amplitude, 0);
    PositionOutput[i2] = float4(P2 - D2 * Amplitude, 0);
    PositionOutput[i3] = float4(P3 - D3 * Amplitude, 0);
}
