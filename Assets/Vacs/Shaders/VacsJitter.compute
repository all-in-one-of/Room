#pragma kernel Main

#include "Common.hlsl"
#include "SimplexNoise3D.hlsl"

StructuredBuffer<float4> PositionSource;
StructuredBuffer<float4> PositionInput;
RWBuffer<float4> PositionOutput;

CBUFFER_START(Params)
    uint TriangleCount;
    float Time;
    float RandomSeed;
    float Amplitude;
CBUFFER_END

[numthreads(256, 1, 1)]
void Main(uint id : SV_DispatchThreadID)
{
    if (id >= TriangleCount) return;

    const uint i1 = id;
    const uint i2 = id + TriangleCount;
    const uint i3 = id + TriangleCount * 2;

    const float3 P1 = PositionSource[i1].xyz;
    const float3 P2 = PositionSource[i2].xyz;
    const float3 P3 = PositionSource[i3].xyz;

    // Low amplitude noise
    const float3 Voffs1 = float3(RandomSeed * 100, 0.5f * Time, 0.3f * Time);
    const float freq1 = 20;
    const float amp1 = 0.01f;
    float3 N1 = snoise(P1 * freq1 + Voffs1).xyz * amp1;
    float3 N2 = snoise(P2 * freq1 + Voffs1).xyz * amp1;
    float3 N3 = snoise(P3 * freq1 + Voffs1).xyz * amp1;

    // High amplitude noise
    const float3 Voffs2 = float3(RandomSeed * 100, 1.2f * Time, -0.4f * Time);
    const float freq2 = 43;
    N1 *= 1 + pow(abs(snoise(P1 * freq2 + Voffs2).w), 10) * 150;
    N2 *= 1 + pow(abs(snoise(P2 * freq2 + Voffs2).w), 10) * 150;
    N3 *= 1 + pow(abs(snoise(P3 * freq2 + Voffs2).w), 10) * 150;

    PositionOutput[i1] = float4(PositionInput[i1].xyz + N1 * Amplitude, 0);
    PositionOutput[i2] = float4(PositionInput[i2].xyz + N2 * Amplitude, 0);
    PositionOutput[i3] = float4(PositionInput[i3].xyz + N3 * Amplitude, 0);
}
