#pragma kernel Main

#include "Common.hlsl"
#include "SimplexNoise3D.hlsl"

StructuredBuffer<float4> PositionInput;
RWBuffer<float4> PositionOutput;

CBUFFER_START(Params)
    uint TriangleCount;
    float Time;
    float RandomSeed;
    float Amplitude;
CBUFFER_END

[numthreads(256, 1, 1)]
void Main(uint id : SV_DispatchThreadID)
{
    if (id >= TriangleCount) return;

    const uint i1 = id;
    const uint i2 = id + TriangleCount;
    const uint i3 = id + TriangleCount * 2;

    const float3 P1 = PositionInput[i1].xyz;
    const float3 P2 = PositionInput[i2].xyz;
    const float3 P3 = PositionInput[i3].xyz;

    // Centroid (triangle)
    float3 C = (P1 + P2 + P3) / 3;

    // Centroid (belonging cluster)
    const float cluster_size = 0.04;
    C -= (frac(C / cluster_size) - 0.5) * cluster_size;

    // Animate the interpolation parameter with the noise field.
    const float3 Pn = C * 3 + float3(RandomSeed * 100, 0, Time);
    const float amp1 = smoothstep(0, 0.75f, Amplitude) * 1;
    const float amp2 = smoothstep(0.5f, 1, Amplitude) * 1.9;
    const float param = max(0, 1 + snoise(Pn).w * amp1 - amp2);

    PositionOutput[i1] = float4(lerp(C, P1, param), 0);
    PositionOutput[i2] = float4(lerp(C, P2, param), 0);
    PositionOutput[i3] = float4(lerp(C, P3, param), 0);
}
