#pragma kernel Main

#include "Common.hlsl"

StructuredBuffer<float4> PositionSource;
StructuredBuffer<float4> PositionModified;

StructuredBuffer<float4> NormalInput;
RWBuffer<float4> NormalOutput;

StructuredBuffer<float4> TangentInput;
RWBuffer<float4> TangentOutput;

CBUFFER_START(Params)
    uint TriangleCount;
CBUFFER_END

[numthreads(256, 1, 1)]
void Main(uint id : SV_DispatchThreadID)
{
    if (id >= TriangleCount) return;

    uint i1 = id;
    uint i2 = id + TriangleCount;
    uint i3 = id + TriangleCount * 2;

    float3 Ps1 = PositionSource[i1].xyz;
    float3 Ps2 = PositionSource[i2].xyz;
    float3 Ps3 = PositionSource[i3].xyz;

    float3 Pm1 = PositionModified[i1].xyz;
    float3 Pm2 = PositionModified[i2].xyz;
    float3 Pm3 = PositionModified[i3].xyz;

    // Calculate the normals of the source and modified triangles.
    float3 Ns = normalize(cross(Ps2 - Ps1, Ps3 - Ps1));
    float3 Nm = normalize(cross(Pm2 - Pm1, Pm3 - Pm1));

    // Calculate the parameter based on the difference in the normals.
    float param = saturate(distance(Ns, Nm) * 30);

    NormalOutput[i1] = float4(lerp(NormalInput[i1].xyz, Nm, param), param);
    NormalOutput[i2] = float4(lerp(NormalInput[i2].xyz, Nm, param), param);
    NormalOutput[i3] = float4(lerp(NormalInput[i3].xyz, Nm, param), param);

    TangentOutput[i1] = TangentInput[i1];
    TangentOutput[i2] = TangentInput[i2];
    TangentOutput[i3] = TangentInput[i3];
}
